package parkinglot;

import java.util.Scanner;

class vehicle{
	
	String vehicleid;
	String vehicletype;
	int allotedslot;
	int entryhour;
	int entryminute;
	
//	class time{
//		int hours;
//		int minute;
//		public time(int hour,int min)
//		{
//			this.hours=hour;
//			this.minute=min;
//			
//		}
//		
//	}
//	
	
}
class motorcycle extends vehicle{
	
}
class car extends vehicle{
	
	//by creating car as seperate class we don't have to print more if statements in main function
	
	//instead of creating this fields,find anyother way to display entry time in this class
	public car()
	{
		
		System.out.println("Enter your car id: ");
		Scanner key=new Scanner(System.in);
		 String carid=key.next();
            this.setcarid(carid);
	
		entryterminal objj=new entryterminal();
		//but this is not right way because you are creating a new object so you cannot access the fields of previous object created.
		//to call the methods in terminal classes ,i created an object of that class.
		//the moment we create an object of terminal we want to know the timings . so i used a constructor inside terminal class.
		
		//after executing all the statements in the constructor of entryterminal class it will go to the nextline.
		 entryhour=objj.entryhour;
		 entryminute=objj.entryminute;
		allotedslot=this.allotedslot();
		
	}
	public int allotedslot()
	//by using this function in this class we can call a specific function in carspot
	{
		carspot objjj=new carspot();
		return objjj.emptyslot();
	}
		
	
	public void setcarid(String s)
	{
		super.vehicleid=s;
	}
	
	public void detailsofticket()
	//again this method is also common to all the types of vehicles
	{
		
		//creating object to access fields in entryterminal. 
		System.out.println("vehicle type: car");
		System.out.println("car id: "+super.vehicleid);
		//to display only entry timings we can have method in another class
		System.out.println("alloted slot: c["+allotedslot+"]");
		System.out.println("entry time-  hour:"+entryhour+"min :"+entryminute);
		
		
	}
	
	
	
	
}
class handicapvehicle extends vehicle{
	
	
	
	
}
//we can connect this terminal to vehicles class and all other above classes by using interfaces and abstract classes.
//class terminal {
//	
////	int hours;
////	int minutes;
//	//these hours and mins are noted both at entry and exit pts;
//	
//	
//	
//}
// i have used seperate classes for both terminals instead of directly using them in vehicles is because both the 
//terminals have different functionality.
class entryterminal extends vehicle  {
	//somehow i have to make a link from this class to others without inheriting all the features in the otherclasses.

	
	public entryterminal()
	{
		System.out.println("Enter the entry time in numbers:");
		System.out.println("        entryhour:");
		Scanner key=new Scanner (System.in);
		entryhour=key.nextInt();
		System.out.println("Enter the entry minute in numbers:");
		entryminute=key.nextInt();
		
//		this.allotslot();
//		
		
		
	}
	
	
	public static void displayentryterminal() {
		
		//this function is to display vacancies
		
		
	}
	
	public void sethm(int x,int y)
	{
		this.entryhour=x;
		this.entryminute=y;
		
	}
	
	
	
	
//	public int allotslot() {
//		
//		//for 'car' use call the function in carspot.
//		//i think this allotslot is used for all types of parkingslots here we can use the concepts of interfaces and abstract class
//	}
	
	
	
	
}
class exitterminal extends vehicle{
	
	//In this exit terminal we calculate the fee and also change the boolean value of the slot the vehicle left
	int exithour;
	int exitminute;
	
	public void sethm(int x,int y)
	{
		this.exithour=x;
		this.exitminute=y;
	}
	public void changeboolean()
	{
		
	}
	
	
	
}
//to manage the slot system seperately i have used different classes for different  classes for slot systems
class parkingspot{
	
//	int spotid;
//	int reservestatus;
	
	
	
}
class carspot extends parkingspot{
	
	int c[]=new int[10];
	
	public int emptyslot()
	{
		for(int i=0;i<c.length;i++)
		{
			if(c[i]==0) {return i;}
		}
		return 11;
		
		
	}
	
	//give the empty slot that is close to the entry point of the customer
}
class handicapspot extends parkingspot{
	int h[]=new int[10];
	
	
}
class motorcyclespot extends parkingspot{
	
	int m[]=new int[10];
	
	
}

public class parkinglotdemo {
	public static void main(String []args)
	{
		Scanner key=new Scanner(System.in);
		System.out.println("welcome to xyz");
		System.out.println("please enter 'e' to get a parking ticket");
		
		entryterminal.displayentryterminal();//i made this method static
		String c=key.next();
		if(c.equals("e")==true)
		{
		       System.out.println("your vehicle type:      (enter your vehicle type by seeing the type of slots available in the display board)");
		       // display board displays the current status of all vehicle type slots
		       String vtype=key.next();
		       //so the user is only bound to type the vehicles that are displayed on board.
		       String vehtype=vtype.toLowerCase();
		       
		       if(vehtype.equals("car"))
		       {
		    	   car obj=new car();
//		    	 String carid=key.next();
//   	            obj.setcarid(carid);
		    	   //i have used the above two comment statements in the constructor itself
   	           
   	            System.out.println("Enter 'get' to get the ticket consisting of your alloted slot");
   	            String enter=key.next();
   	            
   	            if(enter.equals("get"))
   	            {
   	            	
   	            	obj.detailsofticket();
   	            	//there is  a bigchallenge in calling the entry time
   	            	
   	            }
	            
		    	   
		    	   
		    	 
		       }
		       else if(vehtype.equals("motorcyle"))
		       {
		    	   
		       }
		       else if(vehtype.equals("handicapvehicle"))
		       {
		    	   
		       }
		       
		       
		}
		
	}

}
