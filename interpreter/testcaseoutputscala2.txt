input:
object demo{ 
	var x : int = 5;
	do{
		x=x-3
	}
	while( x<3) 
}   

parser output:

parse
demo
id
demo
Token(LCURL, '{')
body
Token(LCURL, '{')
stmtlist
Token(VAR, 'VAR')
stmt
decleration stmt
var eaten
Token(ID, 'x')
Token(COLON, ':')
done
done
Token(INT, 'INT')
Token(ASSIGN, '=')
expr
term
factor
Token(INTEGER, 5)
stmt
stmt1
dostmt
Token(LCURL, '{')
Token(ID, 'x')
stmtlist
Token(ID, 'x')
stmt
assign_stmt
x
id
expr
term
factor
x
id
term
factor
Token(INTEGER, 3)
Token(RCURL, '}')
Token(WHILE, 'WHILE')
Token(LPAREN, '(')
Token(ID, 'x')
cond_stmt
expr
term
factor
x
id
expr
term
factor
Token(INTEGER, 3)
Token(RPAREN, ')')
RCURL